name: Test, Build, and Deploy to EC2

on:
  push:
    branches:
      - '**'
  pull_request:
    branches:
      - '**'

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      # Checks out decipher-frontend so the job can access it

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
      # Sets up Node.js environment

    # - name: Install Dependencies
    #   run: npm install
    #   # Installs project dependencies including Cypress

    - name: Run Cypress Tests
      uses: cypress-io/github-action@v6
      # Cypress automatically locates tests in /cypress/e2e 

      with:
        start: npm start
        browser: chrome
        wait-on: 'http://localhost:3000'
        wait-on-timeout: 60
        record: true
      env:
        CYPRESS_RECORD_KEY: ${{ secrets.CYPRESS_RECORD_KEY }}
        NODE_ENV: 'production'
        # Make request to production server
      # Runs Cypress tests. 
      # 'wait-on-timeout' specified how many seconds to wait until localhost becomes available
      # record-key value is provided by Cypress cloud. This key is used to record tests through videos and screenshots and make them viewable on our Cypress cloud account.
  build:
    needs: test
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    - name: Install dependencies
      run: npm install
    - name: Build React app
      run: npm run build
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: build/

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
    - name: Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: build/
    - name: List directory contents
      run: ls -al build
    - name: Deploy Build Artifacts to EC2
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        source: "build/*"
        target: "/var/www/html/decipher-frontend/"
